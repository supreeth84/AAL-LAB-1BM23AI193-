

#include <limits.h>
#include <stdbool.h>
#include <stdio.h>

#define V 6  // Number of vertices in the graph

// Function to find the vertex with the minimum distance value
int minDistance(int dist[], bool sptSet[]) {
    int min = INT_MAX, min_index;
    
    // Find the vertex with the smallest tentative distance
    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    
    return min_index;
}

// Function to print the shortest path tree (SPT)
void printSolution(int dist[], int n) {
    printf("Vertex \t\t Distance from Source\n");
    for (int i = 0; i < n; i++) {
        printf("%d \t\t %d\n", i, dist[i]);
    }
}

// Function to implement Dijkstra's algorithm
void dijkstra(int graph[V][V], int src) {
    int dist[V];      // Array to store the shortest distance from the source
    bool sptSet[V];   // Array to check if a vertex is included in the shortest path tree

    // Initialize all distances as INFINITE and sptSet[] as false
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }
    
    // Distance from source to itself is always 0
    dist[src] = 0;

    // Find the shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the vertex with the minimum distance from the set of vertices not yet processed
        int u = minDistance(dist, sptSet);

        // Mark the picked vertex as processed
        sptSet[u] = true;

        // Update dist[] for the adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++) {
            // Update the distance if the edge from u to v is shorter
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the calculated shortest distances from the source
    printSolution(dist, V);
}

int main() {
    // Example graph represented as an adjacency matrix
    int graph[V][V] = {
        {0, 7, 9, 0, 0, 14},
        {7, 0, 10, 15, 0, 0},
        {9, 10, 0, 11, 0, 0},
        {0, 15, 11, 0, 6, 0},
        {0, 0, 0, 6, 0, 9},
        {14, 0, 0, 0, 9, 0}
    };

    int source = 0;  // Source node for the shortest path calculation
    dijkstra(graph, source);
    
    return 0;
}

OUTPUT:

Vertex 		 Distance from Source
0 		 0
1 		 7
2 		 9
3 		 20
4 		 23
5 		 14


=== Code Execution Successful ===
